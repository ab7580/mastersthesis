trigger: none 

stages:
  - template: 'templates/static_build.yaml'
    parameters:
      imageName: 'ab7580/webgoat'
      imageTag: 'latest'
      mavenPomFile: 'pom.xml'
      dockerHubServiceConn: DockerHubServiceConn
      sonarQubeRun: true
      sonarQubeBreak: true

#   - stage: Build
#     jobs:
#     - job: Build
#       pool:
#         vmImage: 'ubuntu-latest'
#       displayName: Build WebGoat
#       workspace:
#         clean: all
#       steps:
# # DEPENDENCY CHECK START
#       - template: 'templates/dependency_check.yaml'
#         parameters:
#           cache: true

#       - task: PowerShell@2
#         displayName: DependencyChecker Break
#         inputs:
#           filePath: 'devops/dependencycheck_fail_pipeline.ps1'
# # DEPENDENCY CHECK END

# # SONARQUBE + BUILD START
#       - task: SonarQubePrepare@5
#         displayName: SonarQube Prepare
#         inputs:
#           SonarQube: 'SonarCubeServiceConn'
#           scannerMode: 'Other'
#           extraProperties: sonar.exclusions=devops/**

#       - task: Maven@3
#         displayName: Maven Build
#         inputs:
#           mavenPomFile: 'pom.xml'
#           goals: 'clean install'
#           publishJUnitResults: false
#           javaHomeOption: 'JDKVersion'
#           jdkVersionOption: '1.11'
#           mavenVersionOption: 'Default'
#           mavenAuthenticateFeed: false
#           effectivePomSkip: false
#           sonarQubeRunAnalysis: true
#           sqMavenPluginVersionChoice: 'latest'

#       - task: SonarQubePublish@5
#         displayName: SonarQube Publish
#         inputs:
#           pollingTimeoutSec: '300'

#       - task: PowerShell@2
#         displayName: SonarQube Break
#         inputs:
#           filePath: 'devops/sonarcube_fail_pipeline.ps1'
#         env:
#           SONAR-TOKEN: $(sonar-token) # secret defined in pipeline must be mapped to env variable and used in powershell script
# # SONARQUBE + BUILD END

# # DOCKER START
#       - task: Docker@2
#         displayName: Build Docker Image
#         inputs:
#           repository: '$(imageName)'
#           command: 'build'
#           Dockerfile: 'webgoat-server/Dockerfile'
#           tags: '$(imageTag)'
          
#       - task: Docker@2
#         displayName: Push Docker Image
#         inputs:
#           containerRegistry: 'DockerHubServiceConn'
#           repository: '$(imageName)'
#           command: 'push'
#           tags: '$(imageTag)'
# # DOCKER END